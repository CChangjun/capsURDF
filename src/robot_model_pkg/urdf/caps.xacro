<robot name="differential_drive_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
<!-- body dimensions-->

<!--caps -->

<xacro:property name="body_link_x_dim" value="0.45"/><!--1-->
<xacro:property name="body_link_y_dim" value="0.45"/><!--0.6-->
<xacro:property name="body_link_z_dim" value="0."/><!--0.3-->

<!-- wheel dimensions-->
<xacro:property name="wheel_link_radius" value="0.06"/>
<xacro:property name="wheel_link_length" value="0.025"/>
<xacro:property name="wheel_link_z_location" value="-0.07"/>

<!--Material density-->
<xacro:property name="body_density" value="2010.0"/><!--여기바꿈0추가-->
<xacro:property name="wheel_density" value="2010.0"/>

<!-- PI constant-->
<xacro:property name="pi_const" value="3.14159265"/>

<!-- Robot body and wheel mass-->
<xacro:property name="body_mass" value="${body_density*body_link_x_dim*body_link_y_dim*body_link_z_dim}"/>
<xacro:property name="wheel_mass" value="${wheel_density*pi_const*wheel_link_radius*wheel_link_radius*wheel_link_length}"/>

<!-- Moment of inertia of the wheel-->
<xacro:property name="Iz_wheel" value="${0.5*wheel_mass*wheel_link_radius*wheel_link_radius}"/>
<xacro:property name="I_wheel" value="${(1.0/12.0)*wheel_mass*(3.0*wheel_link_radius*wheel_link_radius+wheel_link_length*wheel_link_length)}"/>

<!-- color -->
<material name="blue">
    <color rgba = "0 0 0.8 1"/>
  </material>

  <material name="gray">
    <color rgba = "1 1 1 1"/>
  </material>

  <material name="blueviolet">
    <color rgba = "0.54 0.16 0.88 1"/>
  </material>

  <material name="changF">
    <color rgba = "0.7 0 0.5 1"/>
  </material>

  <material name="changS">
    <color rgba = "0.2 0.9 0.1 1"/>
  </material>
<!-- This macro defines the complete inertial section of the wheel-->
<!-- It is used later in the code -->
<xacro:macro name="inertia_wheel">
        <inertial>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <mass value="${wheel_mass}"/>
        <inertia ixx="${I_wheel}" ixy="0.0" ixz="0.0" iyy="${I_wheel}" iyz="0" izz="${Iz_wheel}"/>
        </inertial>
</xacro:macro>

<!-- over here we includethe file that defines extra Gazebo options and motion control driver-->
<xacro:include filename="$(find robot_model_pkg)/urdf/robot.gazebo"/>

<!-- ##########################################################-->
<!-- FROM HERE WE DEFINE LINKS, JPOINTS BY CHANG JUN LEE-->
<!-- ##########################################################-->


<!-- we need to have this footprint link otherwise Gazebo will complain-->
<link name="footprint">
</link>
<joint name="footprint_joint" type="fixed">
        <parent link="footprint"/>
        <child link="base_link"/>
</joint>

<!-- ##########################################################-->
<!-- START : BODY LINK OF THE ROBOT-->
<!-- ##########################################################-->

<link name="base_link">
        <visual>
                <geometry>
                        <box size="${body_link_x_dim} ${body_link_y_dim} ${body_link_z_dim}" />
                </geometry>
        <origin rpy="0 0 0" xyz="0 0 0" />
        </visual>

        <collision>
                <geometry>
                        <box size="${body_link_x_dim} ${body_link_y_dim} ${body_link_z_dim}" />
                </geometry>
                <origin rpy="0 0 0" xyz="0 0 0" />
        </collision>
        
        <inertial>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <mass value="${body_mass}"/>
        <inertia
        ixx="${(1/12)*body_mass*(body_link_y_dim*body_link_y_dim+body_link_z_dim*body_link_z_dim)}"
        ixy="0"
        ixz="0"
        iyy="${(1/12)*body_mass*(body_link_x_dim*body_link_x_dim+body_link_z_dim*body_link_z_dim)}"
        iyz="0"
        izz="${(1/12)*body_mass*(body_link_y_dim*body_link_y_dim+body_link_x_dim*body_link_x_dim)}" />
        </inertial>
</link>


<joint name="wheel1_joint" type="continuous">
        <parent link="base_link"/>
        <child link="wheel1_link"/>
        <origin xyz="${-body_link_x_dim/2+1.2*wheel_link_radius} ${-body_link_y_dim/2-wheel_link_length/2} ${wheel_link_z_location}"
        rpy = "0 0 0"/>
        <axis xyz="0 1 0"/>
        <limit effort="1000" velocity="1000"/>
        <dynamics damping="1.0" friction="1.0" />
</joint>



<link name="wheel1_link">
        <visual>
                <origin rpy="1.570795 0 0" xyz="0 0 0"/>
                <geometry>
                        <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
                </geometry>
                 <material name = "changF"/>
        </visual>

        <collision>
                <origin rpy="1.570795 0 0" xyz="0 0 0"/>
                <geometry>
                        <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
                </geometry>
        </collision>

        <xacro:inertia_wheel/> 
</link>

<!-- ##########################################################-->
<!-- END: BACK RIGTH WHEEL OF THE ROBOT AND THE JOINT-->
<!-- ##########################################################-->



<!-- ##########################################################-->
<!-- START : BACK LEFT WHEEL OF THE ROBOT AND THE JOINT-->
<!-- ##########################################################-->

<joint name="wheel2_joint" type="continuous">
        <parent link="base_link"/>
        <child link="wheel2_link"/>
        <origin xyz="${-body_link_x_dim/2+1.2*wheel_link_radius} ${body_link_y_dim/2+wheel_link_length/2} ${wheel_link_z_location}"
        rpy = "0 0 0"/>
        <axis xyz="0 1 0"/>
        <limit effort="1000" velocity="1000"/>
        <dynamics damping="1.0" friction="1.0" />
</joint>

<link name="wheel2_link">
        <visual>
                <origin rpy="1.570795 0 0" xyz="0 0 0" />
                <geometry>
                        <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
                </geometry>
                <material name = "changF"/>
        </visual>

        <collision>
                <origin rpy="1.570795 0 0" xyz="0 0 0"/>
                <geometry>
                        <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
                </geometry>
        </collision>
        <xacro:inertia_wheel/>
</link>

<!-- ##########################################################-->
<!-- END: BACK LEFT WHEEL OF THE ROBOT AND THE JOINT-->
<!-- ##########################################################-->

<!-- ##########################################################-->
<!-- START : FRONT RIGTH WHEEL OF THE ROBOT AND THE JOINT-->
<!-- ##########################################################-->
 <joint name = "caster_wheel_joint" type = "fixed">
    <parent link = "base_link"/>
    <child link = "caster_wheel"/>
    <origin xyz="${body_link_x_dim/2-1.8*wheel_link_radius} ${-body_link_y_dim/2+0.15} ${wheel_link_z_location}"
        rpy = "0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>


   <link name="caster_wheel">
    <visual>
      <origin xyz="0 0 0" rpy = "1.570795 0 0"/>
      <geometry>
     <cylinder length="${wheel_link_length*2}" radius="${wheel_link_radius}"/>
      </geometry>
      <material name = "blueviolet"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy = "1.570795 0 0"/>
      <geometry>
 <cylinder length="${wheel_link_length*2}" radius="${wheel_link_radius}"/>
      </geometry>
    </collision>
  </link>




  <joint name = "head_scanner" type = "fixed">
    <origin xyz = "0 0 0.07" rpy = "0 0 0"/>
    <parent link = "base_link"/>
    <child link = "base_scan"/>
  </joint>


   <link name="base_scan">
    <visual>
      <origin xyz="0 0 0.05" rpy = "0 0 1.570795"/>
      <geometry>
        <cylinder length="0.1" radius="0.09"/>
      </geometry>
      <material name = "blueviolet"/>
    </visual>
    <collision>
      <origin xyz="0 0 0.05" rpy = "0 0 1.570795"/>
      <geometry>
        <cylinder length="0.1" radius="0.09"/>
      </geometry>
    </collision>
  </link>
<!-- ##########################################################-->
<!-- END: FRONT RIGHT WHEEL OF THE ROBOT AND THE JOINT-->
<!-- ##########################################################-->
</robot>



